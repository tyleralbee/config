[
    // Use neovim's yank behavior: yank to end of line.
    {
        "context": "vim_mode == normal && !menu",
        "bindings": {
            "shift-y": ["workspace::SendKeystrokes", "y $"]
        }
    },
    // Multicursor in normal, visual, operator, and insert modes if not in a menu
    {
        "context": "(VimControl || vim_mode == insert) && !menu",
        "bindings": {
            "alt-j": "editor::AddSelectionBelow",
            "alt-k": "editor::AddSelectionAbove"
        }
    },
    // Surround vim
    {
        "context": "vim_mode == visual",
        "bindings": {
            "s": [
                "vim::PushOperator",
                {
                    "AddSurrounds": {}
                }
            ]
        }
    },
    // TODO: Use alt-j and alt-k instead of ctrl-d and ctrl-u for scrolling
    // - This currently doesn't work because hover hints are not in the menu context
    // {
    //     "context": "menu",
    //     "bindings": {
    //         "alt-j": "vim::ScrollDown",
    //         "alt-k": "vim::ScrollUp"
    //     }
    // },
    {
        "context": "Editor",
        "bindings": {
            "ctrl-.": "editor::ToggleCodeActions",

            "alt-f": "editor::Format",
            "alt-h": ["workspace::ActivatePaneInDirection", "Left"],
            "alt-l": ["workspace::ActivatePaneInDirection", "Right"],
            "alt-space": "editor::ToggleCodeActions",

            "alt-shift-i": "editor::SplitSelectionIntoLines",
            "alt-shift-j": "editor::MoveLineDown",
            "alt-shift-k": "editor::MoveLineUp",
            "alt-shift-r": "editor::RestartLanguageServer"
        }
    },
    {
        "bindings": {
            // allow file finder in insert mode (still doesn't work in completion menus)
            "ctrl-p": "file_finder::Toggle",

            // Toggle between Terminal and Editor without closing terminal
            "ctrl-shift-k": "terminal_panel::ToggleFocus",
            // Open/Close Terminal
            "ctrl-shift-i": "workspace::ToggleBottomDock",

            "alt-[": "workspace::ToggleLeftDock",
            "alt-]": "workspace::ToggleRightDock",

            "alt-,": "zed::OpenSettings",
            "alt-.": "zed::OpenKeymap",

            "alt-shift-,": "zed::OpenDefaultSettings",
            "alt-shift-.": "zed::OpenDefaultKeymap",
            "alt-shift-/": "vim::OpenDefaultKeymap",

            // Project file search, command palette
            "alt-j": "menu::SelectNext",
            "alt-k": "menu::SelectPrev"
        }
    },
    // Code Actions, Autocomplete
    {
        "context": "Editor && (showing_code_actions || showing_completions)",
        "bindings": {
            "alt-j": "editor::ContextMenuNext",
            "alt-k": "editor::ContextMenuPrev"
        }
    },
    // Split Panes
    {
        "context": "Pane",
        "bindings": {
            "alt-shift-h": "pane::SplitLeft",
            "alt-shift-l": "pane::SplitRight"
        }
    },
    // Firefox Developer Keyboard Shortcuts (kind of) + Pane Navigation from Terminal
    {
        "context": "Terminal",
        "bindings": {
            // Pane navigation
            "alt-h": ["workspace::ActivatePaneInDirection", "Left"],
            "alt-j": ["workspace::ActivatePaneInDirection", "Down"],
            "alt-k": ["workspace::ActivatePaneInDirection", "Up"],
            "alt-l": ["workspace::ActivatePaneInDirection", "Right"]
        }
    },
    // Pane Navigation from Project Panel
    {
        "context": "ProjectPanel",
        "bindings": {
            "alt-h": ["workspace::ActivatePaneInDirection", "Left"],
            "alt-j": ["workspace::ActivatePaneInDirection", "Down"],
            "alt-k": ["workspace::ActivatePaneInDirection", "Up"],
            "alt-l": ["workspace::ActivatePaneInDirection", "Right"]
        }
    }
]
